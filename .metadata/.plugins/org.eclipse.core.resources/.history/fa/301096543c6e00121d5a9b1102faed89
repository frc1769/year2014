#include "WPILib.h"
#include <jaguar.h>
#include <math.h>
#include <Timer.h>
#define K_p 0.065
#define K_i 0.0000025
#define K_d 0.003

/**
 * This is a demo program showing the use of the RobotBase class.
 * The SimpleRobot class is the base of a robot application that will automatically call your
 * Autonomous and OperatorControl methods at the right time as controlled by the switches on
 * the driver station or the field controls.
 */ 
class RobotDemo : public SimpleRobot
{
	
	Jaguar fl;
	Jaguar fr;
	Jaguar rl;
	Jaguar rr;
	Jaguar shooter;
	Jaguar loader;
	Jaguar lifter;
	RobotDrive myRobot; // robot drive system
	Joystick stick; // only joystick
	AnalogChannel temperature;
	NetworkTable *table;
	Gyro robotangle;
	
private:
	float x;
	float y;
	float turn;
	float current_angle;
	double current_time;
	double old_time;
	float current_angle_centered;
	float error_angle;
	float old_error_angle;
	float integral_angle;
	float derivitive_angle;
	float desired_angle;
	//float K_p;
	//float K_i;
	//float K_d;
	bool first_time;
	double turnx;
	double turny;
	double turnmagnitude;
	bool turnactive;
	double turnangle; 
	double storedangle;
	double startangle;
	/* front right goes to 1
	 * back right goes to 2
	 * front left goes to 3
	 * back left goes to 4
	 */
public:
	RobotDemo(void):
		fl(3),
		fr(1),
		rl(4),
		rr(2),
		shooter(5),
		loader(6), 
		lifter(7),
		myRobot(fl, rl, fr, rr),	// these must be initialized in the same order
		stick(1),		// as they are declared above.
        temperature(2),
        robotangle(1)
	{
		myRobot.SetExpiration(0.1);
		myRobot.SetInvertedMotor (RobotDrive::kFrontRightMotor, true);
		myRobot.SetInvertedMotor (RobotDrive::kRearRightMotor, true);
		myRobot.SetBounds(243, 132, 128, 124, 13); 
		table = NetworkTable::GetTable("datatable");
		//table->PutNumber("Kp",0.13);
		//table->PutNumber("Ki",0);
		//table->PutNumber("Kd",0);
		table->PutNumber("temperature",temperature.GetVoltage());
		table->PutNumber("robotangle",robotangle.GetAngle());
		first_time = true;
		startangle = robotangle.GetAngle();
	}

	/**
	 * Drive left & right motors for 2 seconds then stop
	 */
	void Autonomous(void)
	{
		myRobot.SetSafetyEnabled(false);
		myRobot.Drive(-0.5, 0.0); 	// drive forwards half speed
		Wait(2.0); 				//    for 2 seconds
		myRobot.Drive(0.0, 0.0); 	// stop robot
	}

	/**
	 * Runs the motors with arcade steering. 
	 */
	void OperatorControl(void)
	{
		myRobot.SetSafetyEnabled(true);
		while (IsOperatorControl())
		{
			x = stick.GetRawAxis(3);
			y = stick.GetRawAxis(4);
			turnx = stick.GetRawAxis(1);
			turny = stick.GetRawAxis(2) ;
			//			if(stick.GetRawButton(7))
//			{
//				turn = -0.3;
//			} 
//			else if (stick.GetRawButton(8))
//			{
//				turn = 0.3;
//			}
//			else
//			{
//				turn = 0;
//			}
				
			//K_i = table->GetNumber("Ki");
			//K_p = table->GetNumber("Kp");
			//K_d = table->GetNumber("Kd");
			turnmagnitude = sqrt(pow(turnx,2) + pow(turny,2));
			turnangle = atan2(turny, turnx)/3.14159*180;
			current_angle = robotangle.GetAngle();
			current_time = Timer::GetFPGATimestamp();
			current_angle_centered = (fmod((current_angle+180.0),360.0)-180);
			if (turnmagnitude > 0.75)
			{
				if (turnactive)
				{
					desired_angle = turnangle - storedangle + startangle;
				}
				else
				{
					turnactive = true;
					storedangle = turnangle;
					desired_angle = current_angle_centered;
					startangle = current_angle_centered;
				}
			
			}
			else
			{
				if (turnactive)
				{
					turnactive = false; 
					desired_angle = current_angle_centered;	
					startangle = current_angle_centered;
				}
				
			}
		
			//desired_angle = 0;
			error_angle = (fmod((desired_angle - current_angle_centered + 180.0) , 360.0) - 180);
			if (not first_time)
			{
				integral_angle = integral_angle + error_angle * (current_time - old_time);
				derivitive_angle = (error_angle - old_error_angle)/(current_time - old_time); 
				turn =  error_angle * K_p + integral_angle * K_i + derivitive_angle * K_d;
			} 
			else
			{
				turn = 0;
				integral_angle = 0;
				derivitive_angle = 0;
			}
			
			old_time = current_time;
			old_error_angle = error_angle;
			first_time = false;
			
			myRobot.MecanumDrive_Cartesian(x*0.9,y*0.9,turn,0);
			//myRobot.ArcadeDrive(stick); // drive with arcade style (use right stick)
			Wait(0.005);				// wait for a motor update time
			//table->PutNumber("rotation_rate",rotation_rate.GetVoltage());
			table->PutNumber("temperature",temperature.GetVoltage());
			table->PutNumber("robotangle",robotangle.GetAngle());
			
			if(stick.GetRawButton(2))
			{
				shooter.SetSpeed(1);
			} 
			else
			{
				shooter.SetSpeed(0);
			}
			
			if(stick.GetRawButton(1))
			{
				loader.SetSpeed(-1.0);
			}
			else
			{
				loader.SetSpeed(0);
			}
			
			if(stick.GetRawButton(4))
			{
				lifter.SetSpeed(1);
			}
			else
			{
				lifter.SetSpeed(0);
			}
		}
	}
	
	/**
	 * Runs during test mode
	 */
	void Test() {

	}
};

START_ROBOT_CLASS(RobotDemo);

